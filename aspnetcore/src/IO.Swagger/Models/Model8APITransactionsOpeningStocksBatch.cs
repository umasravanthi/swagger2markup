/*
 * API Documentation
 *
 * defaultDeription
 *
 * OpenAPI spec version: 1.0.0-oas3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Model8APITransactionsOpeningStocksBatch : IEquatable<Model8APITransactionsOpeningStocksBatch>
    { 
        /// <summary>
        /// Gets or Sets ResQuantity
        /// </summary>
        [DataMember(Name="ResQuantity")]
        public decimal? ResQuantity { get; set; }

        /// <summary>
        /// Gets or Sets BatchRate
        /// </summary>
        [DataMember(Name="BatchRate")]
        public decimal? BatchRate { get; set; }

        /// <summary>
        /// Gets or Sets FromReservation
        /// </summary>
        [DataMember(Name="FromReservation")]
        public bool? FromReservation { get; set; }

        /// <summary>
        /// Gets or Sets BatchId
        /// </summary>
        [DataMember(Name="BatchId")]
        public int? BatchId { get; set; }

        /// <summary>
        /// Gets or Sets Qty
        /// </summary>
        [DataMember(Name="Qty")]
        public decimal? Qty { get; set; }

        /// <summary>
        /// Gets or Sets InvTagId
        /// </summary>
        [DataMember(Name="InvTagId")]
        public int? InvTagId { get; set; }

        /// <summary>
        /// Gets or Sets BatchNo
        /// </summary>
        [DataMember(Name="BatchNo")]
        public string BatchNo { get; set; }

        /// <summary>
        /// Gets or Sets Value1
        /// </summary>
        [DataMember(Name="Value1")]
        public decimal? Value1 { get; set; }

        /// <summary>
        /// Gets or Sets Value2
        /// </summary>
        [DataMember(Name="Value2")]
        public decimal? Value2 { get; set; }

        /// <summary>
        /// Gets or Sets IReservationId
        /// </summary>
        [DataMember(Name="IReservationId")]
        public int? IReservationId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Model8APITransactionsOpeningStocksBatch {\n");
            sb.Append("  ResQuantity: ").Append(ResQuantity).Append("\n");
            sb.Append("  BatchRate: ").Append(BatchRate).Append("\n");
            sb.Append("  FromReservation: ").Append(FromReservation).Append("\n");
            sb.Append("  BatchId: ").Append(BatchId).Append("\n");
            sb.Append("  Qty: ").Append(Qty).Append("\n");
            sb.Append("  InvTagId: ").Append(InvTagId).Append("\n");
            sb.Append("  BatchNo: ").Append(BatchNo).Append("\n");
            sb.Append("  Value1: ").Append(Value1).Append("\n");
            sb.Append("  Value2: ").Append(Value2).Append("\n");
            sb.Append("  IReservationId: ").Append(IReservationId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Model8APITransactionsOpeningStocksBatch)obj);
        }

        /// <summary>
        /// Returns true if Model8APITransactionsOpeningStocksBatch instances are equal
        /// </summary>
        /// <param name="other">Instance of Model8APITransactionsOpeningStocksBatch to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Model8APITransactionsOpeningStocksBatch other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ResQuantity == other.ResQuantity ||
                    ResQuantity != null &&
                    ResQuantity.Equals(other.ResQuantity)
                ) && 
                (
                    BatchRate == other.BatchRate ||
                    BatchRate != null &&
                    BatchRate.Equals(other.BatchRate)
                ) && 
                (
                    FromReservation == other.FromReservation ||
                    FromReservation != null &&
                    FromReservation.Equals(other.FromReservation)
                ) && 
                (
                    BatchId == other.BatchId ||
                    BatchId != null &&
                    BatchId.Equals(other.BatchId)
                ) && 
                (
                    Qty == other.Qty ||
                    Qty != null &&
                    Qty.Equals(other.Qty)
                ) && 
                (
                    InvTagId == other.InvTagId ||
                    InvTagId != null &&
                    InvTagId.Equals(other.InvTagId)
                ) && 
                (
                    BatchNo == other.BatchNo ||
                    BatchNo != null &&
                    BatchNo.Equals(other.BatchNo)
                ) && 
                (
                    Value1 == other.Value1 ||
                    Value1 != null &&
                    Value1.Equals(other.Value1)
                ) && 
                (
                    Value2 == other.Value2 ||
                    Value2 != null &&
                    Value2.Equals(other.Value2)
                ) && 
                (
                    IReservationId == other.IReservationId ||
                    IReservationId != null &&
                    IReservationId.Equals(other.IReservationId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ResQuantity != null)
                    hashCode = hashCode * 59 + ResQuantity.GetHashCode();
                    if (BatchRate != null)
                    hashCode = hashCode * 59 + BatchRate.GetHashCode();
                    if (FromReservation != null)
                    hashCode = hashCode * 59 + FromReservation.GetHashCode();
                    if (BatchId != null)
                    hashCode = hashCode * 59 + BatchId.GetHashCode();
                    if (Qty != null)
                    hashCode = hashCode * 59 + Qty.GetHashCode();
                    if (InvTagId != null)
                    hashCode = hashCode * 59 + InvTagId.GetHashCode();
                    if (BatchNo != null)
                    hashCode = hashCode * 59 + BatchNo.GetHashCode();
                    if (Value1 != null)
                    hashCode = hashCode * 59 + Value1.GetHashCode();
                    if (Value2 != null)
                    hashCode = hashCode * 59 + Value2.GetHashCode();
                    if (IReservationId != null)
                    hashCode = hashCode * 59 + IReservationId.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Model8APITransactionsOpeningStocksBatch left, Model8APITransactionsOpeningStocksBatch right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Model8APITransactionsOpeningStocksBatch left, Model8APITransactionsOpeningStocksBatch right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
