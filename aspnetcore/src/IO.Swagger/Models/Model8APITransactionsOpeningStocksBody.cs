/*
 * API Documentation
 *
 * defaultDeription
 *
 * OpenAPI spec version: 1.0.0-oas3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Model8APITransactionsOpeningStocksBody : IEquatable<Model8APITransactionsOpeningStocksBody>
    { 
        /// <summary>
        /// Gets or Sets InventoryAllocationStatusId
        /// </summary>
        [DataMember(Name="Inventory Allocation Status__Id")]
        public int? InventoryAllocationStatusId { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="Description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets ProductAlias
        /// </summary>
        [DataMember(Name="Product__Alias")]
        public string ProductAlias { get; set; }

        /// <summary>
        /// Gets or Sets UnitAlias
        /// </summary>
        [DataMember(Name="Unit__Alias")]
        public string UnitAlias { get; set; }

        /// <summary>
        /// Gets or Sets ProductName
        /// </summary>
        [DataMember(Name="Product__Name")]
        public string ProductName { get; set; }

        /// <summary>
        /// Gets or Sets DefaultStatus
        /// </summary>
        [DataMember(Name="DefaultStatus")]
        public int? DefaultStatus { get; set; }

        /// <summary>
        /// Gets or Sets UnitId
        /// </summary>
        [DataMember(Name="Unit__Id")]
        public int? UnitId { get; set; }

        /// <summary>
        /// Gets or Sets InventoryAllocationStatusName
        /// </summary>
        [DataMember(Name="Inventory Allocation Status__Name")]
        public string InventoryAllocationStatusName { get; set; }

        /// <summary>
        /// Gets or Sets WarehouseCode
        /// </summary>
        [DataMember(Name="Warehouse__Code")]
        public string WarehouseCode { get; set; }

        /// <summary>
        /// Gets or Sets Batch
        /// </summary>
        [DataMember(Name="Batch")]
        public Model8APITransactionsOpeningStocksBatch Batch { get; set; }

        /// <summary>
        /// Gets or Sets UnitName
        /// </summary>
        [DataMember(Name="Unit__Name")]
        public string UnitName { get; set; }

        /// <summary>
        /// Gets or Sets InventoryAllocationStatusAlias
        /// </summary>
        [DataMember(Name="Inventory Allocation Status__Alias")]
        public string InventoryAllocationStatusAlias { get; set; }

        /// <summary>
        /// Gets or Sets Rate
        /// </summary>
        [DataMember(Name="Rate")]
        public decimal? Rate { get; set; }

        /// <summary>
        /// Gets or Sets WarehouseName
        /// </summary>
        [DataMember(Name="Warehouse__Name")]
        public string WarehouseName { get; set; }

        /// <summary>
        /// Gets or Sets Quantity
        /// </summary>
        [DataMember(Name="Quantity")]
        public decimal? Quantity { get; set; }

        /// <summary>
        /// Gets or Sets ProductId
        /// </summary>
        [DataMember(Name="Product__Id")]
        public int? ProductId { get; set; }

        /// <summary>
        /// Gets or Sets SRemarks
        /// </summary>
        [DataMember(Name="sRemarks")]
        public string SRemarks { get; set; }

        /// <summary>
        /// Gets or Sets TransactionId
        /// </summary>
        [DataMember(Name="TransactionId")]
        public int? TransactionId { get; set; }

        /// <summary>
        /// Gets or Sets ProductCode
        /// </summary>
        [DataMember(Name="Product__Code")]
        public string ProductCode { get; set; }

        /// <summary>
        /// Gets or Sets Bins
        /// </summary>
        [DataMember(Name="Bins")]
        public List<Model8APITransactionsOpeningStocksBins> Bins { get; set; }

        /// <summary>
        /// Gets or Sets Skid
        /// </summary>
        [DataMember(Name="Skid")]
        public int? Skid { get; set; }

        /// <summary>
        /// Gets or Sets WarehouseId
        /// </summary>
        [DataMember(Name="Warehouse__Id")]
        public int? WarehouseId { get; set; }

        /// <summary>
        /// Gets or Sets WarehouseAlias
        /// </summary>
        [DataMember(Name="Warehouse__Alias")]
        public string WarehouseAlias { get; set; }

        /// <summary>
        /// Gets or Sets Gross
        /// </summary>
        [DataMember(Name="Gross")]
        public decimal? Gross { get; set; }

        /// <summary>
        /// Gets or Sets InventoryAllocationStatusCode
        /// </summary>
        [DataMember(Name="Inventory Allocation Status__Code")]
        public string InventoryAllocationStatusCode { get; set; }

        /// <summary>
        /// Gets or Sets UnitCode
        /// </summary>
        [DataMember(Name="Unit__Code")]
        public string UnitCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Model8APITransactionsOpeningStocksBody {\n");
            sb.Append("  InventoryAllocationStatusId: ").Append(InventoryAllocationStatusId).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  ProductAlias: ").Append(ProductAlias).Append("\n");
            sb.Append("  UnitAlias: ").Append(UnitAlias).Append("\n");
            sb.Append("  ProductName: ").Append(ProductName).Append("\n");
            sb.Append("  DefaultStatus: ").Append(DefaultStatus).Append("\n");
            sb.Append("  UnitId: ").Append(UnitId).Append("\n");
            sb.Append("  InventoryAllocationStatusName: ").Append(InventoryAllocationStatusName).Append("\n");
            sb.Append("  WarehouseCode: ").Append(WarehouseCode).Append("\n");
            sb.Append("  Batch: ").Append(Batch).Append("\n");
            sb.Append("  UnitName: ").Append(UnitName).Append("\n");
            sb.Append("  InventoryAllocationStatusAlias: ").Append(InventoryAllocationStatusAlias).Append("\n");
            sb.Append("  Rate: ").Append(Rate).Append("\n");
            sb.Append("  WarehouseName: ").Append(WarehouseName).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  ProductId: ").Append(ProductId).Append("\n");
            sb.Append("  SRemarks: ").Append(SRemarks).Append("\n");
            sb.Append("  TransactionId: ").Append(TransactionId).Append("\n");
            sb.Append("  ProductCode: ").Append(ProductCode).Append("\n");
            sb.Append("  Bins: ").Append(Bins).Append("\n");
            sb.Append("  Skid: ").Append(Skid).Append("\n");
            sb.Append("  WarehouseId: ").Append(WarehouseId).Append("\n");
            sb.Append("  WarehouseAlias: ").Append(WarehouseAlias).Append("\n");
            sb.Append("  Gross: ").Append(Gross).Append("\n");
            sb.Append("  InventoryAllocationStatusCode: ").Append(InventoryAllocationStatusCode).Append("\n");
            sb.Append("  UnitCode: ").Append(UnitCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Model8APITransactionsOpeningStocksBody)obj);
        }

        /// <summary>
        /// Returns true if Model8APITransactionsOpeningStocksBody instances are equal
        /// </summary>
        /// <param name="other">Instance of Model8APITransactionsOpeningStocksBody to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Model8APITransactionsOpeningStocksBody other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    InventoryAllocationStatusId == other.InventoryAllocationStatusId ||
                    InventoryAllocationStatusId != null &&
                    InventoryAllocationStatusId.Equals(other.InventoryAllocationStatusId)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    ProductAlias == other.ProductAlias ||
                    ProductAlias != null &&
                    ProductAlias.Equals(other.ProductAlias)
                ) && 
                (
                    UnitAlias == other.UnitAlias ||
                    UnitAlias != null &&
                    UnitAlias.Equals(other.UnitAlias)
                ) && 
                (
                    ProductName == other.ProductName ||
                    ProductName != null &&
                    ProductName.Equals(other.ProductName)
                ) && 
                (
                    DefaultStatus == other.DefaultStatus ||
                    DefaultStatus != null &&
                    DefaultStatus.Equals(other.DefaultStatus)
                ) && 
                (
                    UnitId == other.UnitId ||
                    UnitId != null &&
                    UnitId.Equals(other.UnitId)
                ) && 
                (
                    InventoryAllocationStatusName == other.InventoryAllocationStatusName ||
                    InventoryAllocationStatusName != null &&
                    InventoryAllocationStatusName.Equals(other.InventoryAllocationStatusName)
                ) && 
                (
                    WarehouseCode == other.WarehouseCode ||
                    WarehouseCode != null &&
                    WarehouseCode.Equals(other.WarehouseCode)
                ) && 
                (
                    Batch == other.Batch ||
                    Batch != null &&
                    Batch.Equals(other.Batch)
                ) && 
                (
                    UnitName == other.UnitName ||
                    UnitName != null &&
                    UnitName.Equals(other.UnitName)
                ) && 
                (
                    InventoryAllocationStatusAlias == other.InventoryAllocationStatusAlias ||
                    InventoryAllocationStatusAlias != null &&
                    InventoryAllocationStatusAlias.Equals(other.InventoryAllocationStatusAlias)
                ) && 
                (
                    Rate == other.Rate ||
                    Rate != null &&
                    Rate.Equals(other.Rate)
                ) && 
                (
                    WarehouseName == other.WarehouseName ||
                    WarehouseName != null &&
                    WarehouseName.Equals(other.WarehouseName)
                ) && 
                (
                    Quantity == other.Quantity ||
                    Quantity != null &&
                    Quantity.Equals(other.Quantity)
                ) && 
                (
                    ProductId == other.ProductId ||
                    ProductId != null &&
                    ProductId.Equals(other.ProductId)
                ) && 
                (
                    SRemarks == other.SRemarks ||
                    SRemarks != null &&
                    SRemarks.Equals(other.SRemarks)
                ) && 
                (
                    TransactionId == other.TransactionId ||
                    TransactionId != null &&
                    TransactionId.Equals(other.TransactionId)
                ) && 
                (
                    ProductCode == other.ProductCode ||
                    ProductCode != null &&
                    ProductCode.Equals(other.ProductCode)
                ) && 
                (
                    Bins == other.Bins ||
                    Bins != null &&
                    Bins.SequenceEqual(other.Bins)
                ) && 
                (
                    Skid == other.Skid ||
                    Skid != null &&
                    Skid.Equals(other.Skid)
                ) && 
                (
                    WarehouseId == other.WarehouseId ||
                    WarehouseId != null &&
                    WarehouseId.Equals(other.WarehouseId)
                ) && 
                (
                    WarehouseAlias == other.WarehouseAlias ||
                    WarehouseAlias != null &&
                    WarehouseAlias.Equals(other.WarehouseAlias)
                ) && 
                (
                    Gross == other.Gross ||
                    Gross != null &&
                    Gross.Equals(other.Gross)
                ) && 
                (
                    InventoryAllocationStatusCode == other.InventoryAllocationStatusCode ||
                    InventoryAllocationStatusCode != null &&
                    InventoryAllocationStatusCode.Equals(other.InventoryAllocationStatusCode)
                ) && 
                (
                    UnitCode == other.UnitCode ||
                    UnitCode != null &&
                    UnitCode.Equals(other.UnitCode)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (InventoryAllocationStatusId != null)
                    hashCode = hashCode * 59 + InventoryAllocationStatusId.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (ProductAlias != null)
                    hashCode = hashCode * 59 + ProductAlias.GetHashCode();
                    if (UnitAlias != null)
                    hashCode = hashCode * 59 + UnitAlias.GetHashCode();
                    if (ProductName != null)
                    hashCode = hashCode * 59 + ProductName.GetHashCode();
                    if (DefaultStatus != null)
                    hashCode = hashCode * 59 + DefaultStatus.GetHashCode();
                    if (UnitId != null)
                    hashCode = hashCode * 59 + UnitId.GetHashCode();
                    if (InventoryAllocationStatusName != null)
                    hashCode = hashCode * 59 + InventoryAllocationStatusName.GetHashCode();
                    if (WarehouseCode != null)
                    hashCode = hashCode * 59 + WarehouseCode.GetHashCode();
                    if (Batch != null)
                    hashCode = hashCode * 59 + Batch.GetHashCode();
                    if (UnitName != null)
                    hashCode = hashCode * 59 + UnitName.GetHashCode();
                    if (InventoryAllocationStatusAlias != null)
                    hashCode = hashCode * 59 + InventoryAllocationStatusAlias.GetHashCode();
                    if (Rate != null)
                    hashCode = hashCode * 59 + Rate.GetHashCode();
                    if (WarehouseName != null)
                    hashCode = hashCode * 59 + WarehouseName.GetHashCode();
                    if (Quantity != null)
                    hashCode = hashCode * 59 + Quantity.GetHashCode();
                    if (ProductId != null)
                    hashCode = hashCode * 59 + ProductId.GetHashCode();
                    if (SRemarks != null)
                    hashCode = hashCode * 59 + SRemarks.GetHashCode();
                    if (TransactionId != null)
                    hashCode = hashCode * 59 + TransactionId.GetHashCode();
                    if (ProductCode != null)
                    hashCode = hashCode * 59 + ProductCode.GetHashCode();
                    if (Bins != null)
                    hashCode = hashCode * 59 + Bins.GetHashCode();
                    if (Skid != null)
                    hashCode = hashCode * 59 + Skid.GetHashCode();
                    if (WarehouseId != null)
                    hashCode = hashCode * 59 + WarehouseId.GetHashCode();
                    if (WarehouseAlias != null)
                    hashCode = hashCode * 59 + WarehouseAlias.GetHashCode();
                    if (Gross != null)
                    hashCode = hashCode * 59 + Gross.GetHashCode();
                    if (InventoryAllocationStatusCode != null)
                    hashCode = hashCode * 59 + InventoryAllocationStatusCode.GetHashCode();
                    if (UnitCode != null)
                    hashCode = hashCode * 59 + UnitCode.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Model8APITransactionsOpeningStocksBody left, Model8APITransactionsOpeningStocksBody right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Model8APITransactionsOpeningStocksBody left, Model8APITransactionsOpeningStocksBody right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
