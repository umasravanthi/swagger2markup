/*
 * API Documentation
 *
 * defaultDeription
 *
 * OpenAPI spec version: 1.0.0-oas3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Model8APITransactionsBinsData : IEquatable<Model8APITransactionsBinsData>
    { 
        /// <summary>
        /// Gets or Sets ProductCode
        /// </summary>
        [DataMember(Name="Product__Code")]
        public string ProductCode { get; set; }

        /// <summary>
        /// Gets or Sets Batch
        /// </summary>
        [DataMember(Name="Batch")]
        public string Batch { get; set; }

        /// <summary>
        /// Gets or Sets Inward
        /// </summary>
        [DataMember(Name="Inward")]
        public string Inward { get; set; }

        /// <summary>
        /// Gets or Sets PalceItemInward
        /// </summary>
        [DataMember(Name="PalceItemInward")]
        public string PalceItemInward { get; set; }

        /// <summary>
        /// Gets or Sets BatchId
        /// </summary>
        [DataMember(Name="BatchId")]
        public int? BatchId { get; set; }

        /// <summary>
        /// Gets or Sets AllocationTag
        /// </summary>
        [DataMember(Name="AllocationTag")]
        public string AllocationTag { get; set; }

        /// <summary>
        /// Gets or Sets ProductId
        /// </summary>
        [DataMember(Name="Product__Id")]
        public int? ProductId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Model8APITransactionsBinsData {\n");
            sb.Append("  ProductCode: ").Append(ProductCode).Append("\n");
            sb.Append("  Batch: ").Append(Batch).Append("\n");
            sb.Append("  Inward: ").Append(Inward).Append("\n");
            sb.Append("  PalceItemInward: ").Append(PalceItemInward).Append("\n");
            sb.Append("  BatchId: ").Append(BatchId).Append("\n");
            sb.Append("  AllocationTag: ").Append(AllocationTag).Append("\n");
            sb.Append("  ProductId: ").Append(ProductId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Model8APITransactionsBinsData)obj);
        }

        /// <summary>
        /// Returns true if Model8APITransactionsBinsData instances are equal
        /// </summary>
        /// <param name="other">Instance of Model8APITransactionsBinsData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Model8APITransactionsBinsData other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ProductCode == other.ProductCode ||
                    ProductCode != null &&
                    ProductCode.Equals(other.ProductCode)
                ) && 
                (
                    Batch == other.Batch ||
                    Batch != null &&
                    Batch.Equals(other.Batch)
                ) && 
                (
                    Inward == other.Inward ||
                    Inward != null &&
                    Inward.Equals(other.Inward)
                ) && 
                (
                    PalceItemInward == other.PalceItemInward ||
                    PalceItemInward != null &&
                    PalceItemInward.Equals(other.PalceItemInward)
                ) && 
                (
                    BatchId == other.BatchId ||
                    BatchId != null &&
                    BatchId.Equals(other.BatchId)
                ) && 
                (
                    AllocationTag == other.AllocationTag ||
                    AllocationTag != null &&
                    AllocationTag.Equals(other.AllocationTag)
                ) && 
                (
                    ProductId == other.ProductId ||
                    ProductId != null &&
                    ProductId.Equals(other.ProductId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ProductCode != null)
                    hashCode = hashCode * 59 + ProductCode.GetHashCode();
                    if (Batch != null)
                    hashCode = hashCode * 59 + Batch.GetHashCode();
                    if (Inward != null)
                    hashCode = hashCode * 59 + Inward.GetHashCode();
                    if (PalceItemInward != null)
                    hashCode = hashCode * 59 + PalceItemInward.GetHashCode();
                    if (BatchId != null)
                    hashCode = hashCode * 59 + BatchId.GetHashCode();
                    if (AllocationTag != null)
                    hashCode = hashCode * 59 + AllocationTag.GetHashCode();
                    if (ProductId != null)
                    hashCode = hashCode * 59 + ProductId.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Model8APITransactionsBinsData left, Model8APITransactionsBinsData right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Model8APITransactionsBinsData left, Model8APITransactionsBinsData right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
