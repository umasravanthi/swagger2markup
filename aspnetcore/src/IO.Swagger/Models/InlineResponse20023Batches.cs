/*
 * API Documentation
 *
 * defaultDeription
 *
 * OpenAPI spec version: 1.0.0-oas3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class InlineResponse20023Batches : IEquatable<InlineResponse20023Batches>
    { 
        /// <summary>
        /// Gets or Sets BatchId
        /// </summary>
        [DataMember(Name="BatchId")]
        public int? BatchId { get; set; }

        /// <summary>
        /// Gets or Sets IsBatchExists
        /// </summary>
        [DataMember(Name="IsBatchExists")]
        public bool? IsBatchExists { get; set; }

        /// <summary>
        /// Gets or Sets ExpiryDate
        /// </summary>
        [DataMember(Name="ExpiryDate")]
        public int? ExpiryDate { get; set; }

        /// <summary>
        /// Gets or Sets BatchQuntity
        /// </summary>
        [DataMember(Name="BatchQuntity")]
        public int? BatchQuntity { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponse20023Batches {\n");
            sb.Append("  BatchId: ").Append(BatchId).Append("\n");
            sb.Append("  IsBatchExists: ").Append(IsBatchExists).Append("\n");
            sb.Append("  ExpiryDate: ").Append(ExpiryDate).Append("\n");
            sb.Append("  BatchQuntity: ").Append(BatchQuntity).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((InlineResponse20023Batches)obj);
        }

        /// <summary>
        /// Returns true if InlineResponse20023Batches instances are equal
        /// </summary>
        /// <param name="other">Instance of InlineResponse20023Batches to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse20023Batches other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    BatchId == other.BatchId ||
                    BatchId != null &&
                    BatchId.Equals(other.BatchId)
                ) && 
                (
                    IsBatchExists == other.IsBatchExists ||
                    IsBatchExists != null &&
                    IsBatchExists.Equals(other.IsBatchExists)
                ) && 
                (
                    ExpiryDate == other.ExpiryDate ||
                    ExpiryDate != null &&
                    ExpiryDate.Equals(other.ExpiryDate)
                ) && 
                (
                    BatchQuntity == other.BatchQuntity ||
                    BatchQuntity != null &&
                    BatchQuntity.Equals(other.BatchQuntity)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (BatchId != null)
                    hashCode = hashCode * 59 + BatchId.GetHashCode();
                    if (IsBatchExists != null)
                    hashCode = hashCode * 59 + IsBatchExists.GetHashCode();
                    if (ExpiryDate != null)
                    hashCode = hashCode * 59 + ExpiryDate.GetHashCode();
                    if (BatchQuntity != null)
                    hashCode = hashCode * 59 + BatchQuntity.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(InlineResponse20023Batches left, InlineResponse20023Batches right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(InlineResponse20023Batches left, InlineResponse20023Batches right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
