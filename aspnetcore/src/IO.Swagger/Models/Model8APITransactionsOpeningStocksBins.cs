/*
 * API Documentation
 *
 * defaultDeription
 *
 * OpenAPI spec version: 1.0.0-oas3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Model8APITransactionsOpeningStocksBins : IEquatable<Model8APITransactionsOpeningStocksBins>
    { 
        /// <summary>
        /// Gets or Sets ItemId
        /// </summary>
        [DataMember(Name="Item__Id")]
        public int? ItemId { get; set; }

        /// <summary>
        /// Gets or Sets MfgDate
        /// </summary>
        [DataMember(Name="MfgDate")]
        public int? MfgDate { get; set; }

        /// <summary>
        /// Gets or Sets AllocTag
        /// </summary>
        [DataMember(Name="AllocTag")]
        public int? AllocTag { get; set; }

        /// <summary>
        /// Gets or Sets UnitAlias
        /// </summary>
        [DataMember(Name="Unit__Alias")]
        public string UnitAlias { get; set; }

        /// <summary>
        /// Gets or Sets BatchId
        /// </summary>
        [DataMember(Name="BatchId")]
        public int? BatchId { get; set; }

        /// <summary>
        /// Gets or Sets ItemCode
        /// </summary>
        [DataMember(Name="Item__Code")]
        public string ItemCode { get; set; }

        /// <summary>
        /// Gets or Sets Quantity
        /// </summary>
        [DataMember(Name="Quantity")]
        public decimal? Quantity { get; set; }

        /// <summary>
        /// Gets or Sets ItemAlias
        /// </summary>
        [DataMember(Name="Item__Alias")]
        public string ItemAlias { get; set; }

        /// <summary>
        /// Gets or Sets Flag
        /// </summary>
        [DataMember(Name="Flag")]
        public int? Flag { get; set; }

        /// <summary>
        /// Gets or Sets UnitId
        /// </summary>
        [DataMember(Name="Unit__Id")]
        public int? UnitId { get; set; }

        /// <summary>
        /// Gets or Sets BinsAlias
        /// </summary>
        [DataMember(Name="Bins__Alias")]
        public string BinsAlias { get; set; }

        /// <summary>
        /// Gets or Sets ItemName
        /// </summary>
        [DataMember(Name="Item__Name")]
        public string ItemName { get; set; }

        /// <summary>
        /// Gets or Sets Batch
        /// </summary>
        [DataMember(Name="Batch")]
        public string Batch { get; set; }

        /// <summary>
        /// Gets or Sets BinsId
        /// </summary>
        [DataMember(Name="Bins__Id")]
        public int? BinsId { get; set; }

        /// <summary>
        /// Gets or Sets ExpDate
        /// </summary>
        [DataMember(Name="ExpDate")]
        public int? ExpDate { get; set; }

        /// <summary>
        /// Gets or Sets ItemCapacity
        /// </summary>
        [DataMember(Name="ItemCapacity")]
        public int? ItemCapacity { get; set; }

        /// <summary>
        /// Gets or Sets SkidId
        /// </summary>
        [DataMember(Name="SkidId")]
        public int? SkidId { get; set; }

        /// <summary>
        /// Gets or Sets Level
        /// </summary>
        [DataMember(Name="Level")]
        public int? Level { get; set; }

        /// <summary>
        /// Gets or Sets UnitName
        /// </summary>
        [DataMember(Name="Unit__Name")]
        public string UnitName { get; set; }

        /// <summary>
        /// Gets or Sets BinsCode
        /// </summary>
        [DataMember(Name="Bins__Code")]
        public string BinsCode { get; set; }

        /// <summary>
        /// Gets or Sets BinsName
        /// </summary>
        [DataMember(Name="Bins__Name")]
        public string BinsName { get; set; }

        /// <summary>
        /// Gets or Sets Distance
        /// </summary>
        [DataMember(Name="Distance")]
        public int? Distance { get; set; }

        /// <summary>
        /// Gets or Sets UnitCode
        /// </summary>
        [DataMember(Name="Unit__Code")]
        public string UnitCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Model8APITransactionsOpeningStocksBins {\n");
            sb.Append("  ItemId: ").Append(ItemId).Append("\n");
            sb.Append("  MfgDate: ").Append(MfgDate).Append("\n");
            sb.Append("  AllocTag: ").Append(AllocTag).Append("\n");
            sb.Append("  UnitAlias: ").Append(UnitAlias).Append("\n");
            sb.Append("  BatchId: ").Append(BatchId).Append("\n");
            sb.Append("  ItemCode: ").Append(ItemCode).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  ItemAlias: ").Append(ItemAlias).Append("\n");
            sb.Append("  Flag: ").Append(Flag).Append("\n");
            sb.Append("  UnitId: ").Append(UnitId).Append("\n");
            sb.Append("  BinsAlias: ").Append(BinsAlias).Append("\n");
            sb.Append("  ItemName: ").Append(ItemName).Append("\n");
            sb.Append("  Batch: ").Append(Batch).Append("\n");
            sb.Append("  BinsId: ").Append(BinsId).Append("\n");
            sb.Append("  ExpDate: ").Append(ExpDate).Append("\n");
            sb.Append("  ItemCapacity: ").Append(ItemCapacity).Append("\n");
            sb.Append("  SkidId: ").Append(SkidId).Append("\n");
            sb.Append("  Level: ").Append(Level).Append("\n");
            sb.Append("  UnitName: ").Append(UnitName).Append("\n");
            sb.Append("  BinsCode: ").Append(BinsCode).Append("\n");
            sb.Append("  BinsName: ").Append(BinsName).Append("\n");
            sb.Append("  Distance: ").Append(Distance).Append("\n");
            sb.Append("  UnitCode: ").Append(UnitCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Model8APITransactionsOpeningStocksBins)obj);
        }

        /// <summary>
        /// Returns true if Model8APITransactionsOpeningStocksBins instances are equal
        /// </summary>
        /// <param name="other">Instance of Model8APITransactionsOpeningStocksBins to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Model8APITransactionsOpeningStocksBins other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ItemId == other.ItemId ||
                    ItemId != null &&
                    ItemId.Equals(other.ItemId)
                ) && 
                (
                    MfgDate == other.MfgDate ||
                    MfgDate != null &&
                    MfgDate.Equals(other.MfgDate)
                ) && 
                (
                    AllocTag == other.AllocTag ||
                    AllocTag != null &&
                    AllocTag.Equals(other.AllocTag)
                ) && 
                (
                    UnitAlias == other.UnitAlias ||
                    UnitAlias != null &&
                    UnitAlias.Equals(other.UnitAlias)
                ) && 
                (
                    BatchId == other.BatchId ||
                    BatchId != null &&
                    BatchId.Equals(other.BatchId)
                ) && 
                (
                    ItemCode == other.ItemCode ||
                    ItemCode != null &&
                    ItemCode.Equals(other.ItemCode)
                ) && 
                (
                    Quantity == other.Quantity ||
                    Quantity != null &&
                    Quantity.Equals(other.Quantity)
                ) && 
                (
                    ItemAlias == other.ItemAlias ||
                    ItemAlias != null &&
                    ItemAlias.Equals(other.ItemAlias)
                ) && 
                (
                    Flag == other.Flag ||
                    Flag != null &&
                    Flag.Equals(other.Flag)
                ) && 
                (
                    UnitId == other.UnitId ||
                    UnitId != null &&
                    UnitId.Equals(other.UnitId)
                ) && 
                (
                    BinsAlias == other.BinsAlias ||
                    BinsAlias != null &&
                    BinsAlias.Equals(other.BinsAlias)
                ) && 
                (
                    ItemName == other.ItemName ||
                    ItemName != null &&
                    ItemName.Equals(other.ItemName)
                ) && 
                (
                    Batch == other.Batch ||
                    Batch != null &&
                    Batch.Equals(other.Batch)
                ) && 
                (
                    BinsId == other.BinsId ||
                    BinsId != null &&
                    BinsId.Equals(other.BinsId)
                ) && 
                (
                    ExpDate == other.ExpDate ||
                    ExpDate != null &&
                    ExpDate.Equals(other.ExpDate)
                ) && 
                (
                    ItemCapacity == other.ItemCapacity ||
                    ItemCapacity != null &&
                    ItemCapacity.Equals(other.ItemCapacity)
                ) && 
                (
                    SkidId == other.SkidId ||
                    SkidId != null &&
                    SkidId.Equals(other.SkidId)
                ) && 
                (
                    Level == other.Level ||
                    Level != null &&
                    Level.Equals(other.Level)
                ) && 
                (
                    UnitName == other.UnitName ||
                    UnitName != null &&
                    UnitName.Equals(other.UnitName)
                ) && 
                (
                    BinsCode == other.BinsCode ||
                    BinsCode != null &&
                    BinsCode.Equals(other.BinsCode)
                ) && 
                (
                    BinsName == other.BinsName ||
                    BinsName != null &&
                    BinsName.Equals(other.BinsName)
                ) && 
                (
                    Distance == other.Distance ||
                    Distance != null &&
                    Distance.Equals(other.Distance)
                ) && 
                (
                    UnitCode == other.UnitCode ||
                    UnitCode != null &&
                    UnitCode.Equals(other.UnitCode)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ItemId != null)
                    hashCode = hashCode * 59 + ItemId.GetHashCode();
                    if (MfgDate != null)
                    hashCode = hashCode * 59 + MfgDate.GetHashCode();
                    if (AllocTag != null)
                    hashCode = hashCode * 59 + AllocTag.GetHashCode();
                    if (UnitAlias != null)
                    hashCode = hashCode * 59 + UnitAlias.GetHashCode();
                    if (BatchId != null)
                    hashCode = hashCode * 59 + BatchId.GetHashCode();
                    if (ItemCode != null)
                    hashCode = hashCode * 59 + ItemCode.GetHashCode();
                    if (Quantity != null)
                    hashCode = hashCode * 59 + Quantity.GetHashCode();
                    if (ItemAlias != null)
                    hashCode = hashCode * 59 + ItemAlias.GetHashCode();
                    if (Flag != null)
                    hashCode = hashCode * 59 + Flag.GetHashCode();
                    if (UnitId != null)
                    hashCode = hashCode * 59 + UnitId.GetHashCode();
                    if (BinsAlias != null)
                    hashCode = hashCode * 59 + BinsAlias.GetHashCode();
                    if (ItemName != null)
                    hashCode = hashCode * 59 + ItemName.GetHashCode();
                    if (Batch != null)
                    hashCode = hashCode * 59 + Batch.GetHashCode();
                    if (BinsId != null)
                    hashCode = hashCode * 59 + BinsId.GetHashCode();
                    if (ExpDate != null)
                    hashCode = hashCode * 59 + ExpDate.GetHashCode();
                    if (ItemCapacity != null)
                    hashCode = hashCode * 59 + ItemCapacity.GetHashCode();
                    if (SkidId != null)
                    hashCode = hashCode * 59 + SkidId.GetHashCode();
                    if (Level != null)
                    hashCode = hashCode * 59 + Level.GetHashCode();
                    if (UnitName != null)
                    hashCode = hashCode * 59 + UnitName.GetHashCode();
                    if (BinsCode != null)
                    hashCode = hashCode * 59 + BinsCode.GetHashCode();
                    if (BinsName != null)
                    hashCode = hashCode * 59 + BinsName.GetHashCode();
                    if (Distance != null)
                    hashCode = hashCode * 59 + Distance.GetHashCode();
                    if (UnitCode != null)
                    hashCode = hashCode * 59 + UnitCode.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Model8APITransactionsOpeningStocksBins left, Model8APITransactionsOpeningStocksBins right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Model8APITransactionsOpeningStocksBins left, Model8APITransactionsOpeningStocksBins right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
