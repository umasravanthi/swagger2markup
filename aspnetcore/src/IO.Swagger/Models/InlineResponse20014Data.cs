/*
 * API Documentation
 *
 * defaultDeription
 *
 * OpenAPI spec version: 1.0.0-oas3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class InlineResponse20014Data : IEquatable<InlineResponse20014Data>
    { 
        /// <summary>
        /// Gets or Sets PostExchangeRateDiff
        /// </summary>
        [DataMember(Name="PostExchangeRateDiff")]
        public bool? PostExchangeRateDiff { get; set; }

        /// <summary>
        /// Gets or Sets BatchPick
        /// </summary>
        [DataMember(Name="BatchPick")]
        public string BatchPick { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="Name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Inventory
        /// </summary>
        [DataMember(Name="Inventory")]
        public bool? Inventory { get; set; }

        /// <summary>
        /// Gets or Sets DetailedPosting
        /// </summary>
        [DataMember(Name="DetailedPosting")]
        public bool? DetailedPosting { get; set; }

        /// <summary>
        /// Gets or Sets VoucherType
        /// </summary>
        [DataMember(Name="VoucherType")]
        public int? VoucherType { get; set; }

        /// <summary>
        /// Gets or Sets UpdateInvCanBeChanged
        /// </summary>
        [DataMember(Name="UpdateInvCanBeChanged")]
        public bool? UpdateInvCanBeChanged { get; set; }

        /// <summary>
        /// Gets or Sets CostOfIssueAcc
        /// </summary>
        [DataMember(Name="CostOfIssueAcc")]
        public string CostOfIssueAcc { get; set; }

        /// <summary>
        /// Gets or Sets PostVAT
        /// </summary>
        [DataMember(Name="PostVAT")]
        public string PostVAT { get; set; }

        /// <summary>
        /// Gets or Sets RateFormulaBehaviour
        /// </summary>
        [DataMember(Name="RateFormulaBehaviour")]
        public string RateFormulaBehaviour { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponse20014Data {\n");
            sb.Append("  PostExchangeRateDiff: ").Append(PostExchangeRateDiff).Append("\n");
            sb.Append("  BatchPick: ").Append(BatchPick).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Inventory: ").Append(Inventory).Append("\n");
            sb.Append("  DetailedPosting: ").Append(DetailedPosting).Append("\n");
            sb.Append("  VoucherType: ").Append(VoucherType).Append("\n");
            sb.Append("  UpdateInvCanBeChanged: ").Append(UpdateInvCanBeChanged).Append("\n");
            sb.Append("  CostOfIssueAcc: ").Append(CostOfIssueAcc).Append("\n");
            sb.Append("  PostVAT: ").Append(PostVAT).Append("\n");
            sb.Append("  RateFormulaBehaviour: ").Append(RateFormulaBehaviour).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((InlineResponse20014Data)obj);
        }

        /// <summary>
        /// Returns true if InlineResponse20014Data instances are equal
        /// </summary>
        /// <param name="other">Instance of InlineResponse20014Data to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse20014Data other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    PostExchangeRateDiff == other.PostExchangeRateDiff ||
                    PostExchangeRateDiff != null &&
                    PostExchangeRateDiff.Equals(other.PostExchangeRateDiff)
                ) && 
                (
                    BatchPick == other.BatchPick ||
                    BatchPick != null &&
                    BatchPick.Equals(other.BatchPick)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Inventory == other.Inventory ||
                    Inventory != null &&
                    Inventory.Equals(other.Inventory)
                ) && 
                (
                    DetailedPosting == other.DetailedPosting ||
                    DetailedPosting != null &&
                    DetailedPosting.Equals(other.DetailedPosting)
                ) && 
                (
                    VoucherType == other.VoucherType ||
                    VoucherType != null &&
                    VoucherType.Equals(other.VoucherType)
                ) && 
                (
                    UpdateInvCanBeChanged == other.UpdateInvCanBeChanged ||
                    UpdateInvCanBeChanged != null &&
                    UpdateInvCanBeChanged.Equals(other.UpdateInvCanBeChanged)
                ) && 
                (
                    CostOfIssueAcc == other.CostOfIssueAcc ||
                    CostOfIssueAcc != null &&
                    CostOfIssueAcc.Equals(other.CostOfIssueAcc)
                ) && 
                (
                    PostVAT == other.PostVAT ||
                    PostVAT != null &&
                    PostVAT.Equals(other.PostVAT)
                ) && 
                (
                    RateFormulaBehaviour == other.RateFormulaBehaviour ||
                    RateFormulaBehaviour != null &&
                    RateFormulaBehaviour.Equals(other.RateFormulaBehaviour)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (PostExchangeRateDiff != null)
                    hashCode = hashCode * 59 + PostExchangeRateDiff.GetHashCode();
                    if (BatchPick != null)
                    hashCode = hashCode * 59 + BatchPick.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Inventory != null)
                    hashCode = hashCode * 59 + Inventory.GetHashCode();
                    if (DetailedPosting != null)
                    hashCode = hashCode * 59 + DetailedPosting.GetHashCode();
                    if (VoucherType != null)
                    hashCode = hashCode * 59 + VoucherType.GetHashCode();
                    if (UpdateInvCanBeChanged != null)
                    hashCode = hashCode * 59 + UpdateInvCanBeChanged.GetHashCode();
                    if (CostOfIssueAcc != null)
                    hashCode = hashCode * 59 + CostOfIssueAcc.GetHashCode();
                    if (PostVAT != null)
                    hashCode = hashCode * 59 + PostVAT.GetHashCode();
                    if (RateFormulaBehaviour != null)
                    hashCode = hashCode * 59 + RateFormulaBehaviour.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(InlineResponse20014Data left, InlineResponse20014Data right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(InlineResponse20014Data left, InlineResponse20014Data right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
