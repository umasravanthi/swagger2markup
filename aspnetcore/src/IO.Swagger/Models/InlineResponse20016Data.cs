/*
 * API Documentation
 *
 * defaultDeription
 *
 * OpenAPI spec version: 1.0.0-oas3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class InlineResponse20016Data : IEquatable<InlineResponse20016Data>
    { 
        /// <summary>
        /// Gets or Sets Credit
        /// </summary>
        [DataMember(Name="Credit")]
        public int? Credit { get; set; }

        /// <summary>
        /// Gets or Sets Debit
        /// </summary>
        [DataMember(Name="Debit")]
        public int? Debit { get; set; }

        /// <summary>
        /// Gets or Sets OpeningBalance
        /// </summary>
        [DataMember(Name="OpeningBalance")]
        public int? OpeningBalance { get; set; }

        /// <summary>
        /// Gets or Sets Balance
        /// </summary>
        [DataMember(Name="Balance")]
        public int? Balance { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponse20016Data {\n");
            sb.Append("  Credit: ").Append(Credit).Append("\n");
            sb.Append("  Debit: ").Append(Debit).Append("\n");
            sb.Append("  OpeningBalance: ").Append(OpeningBalance).Append("\n");
            sb.Append("  Balance: ").Append(Balance).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((InlineResponse20016Data)obj);
        }

        /// <summary>
        /// Returns true if InlineResponse20016Data instances are equal
        /// </summary>
        /// <param name="other">Instance of InlineResponse20016Data to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse20016Data other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Credit == other.Credit ||
                    Credit != null &&
                    Credit.Equals(other.Credit)
                ) && 
                (
                    Debit == other.Debit ||
                    Debit != null &&
                    Debit.Equals(other.Debit)
                ) && 
                (
                    OpeningBalance == other.OpeningBalance ||
                    OpeningBalance != null &&
                    OpeningBalance.Equals(other.OpeningBalance)
                ) && 
                (
                    Balance == other.Balance ||
                    Balance != null &&
                    Balance.Equals(other.Balance)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Credit != null)
                    hashCode = hashCode * 59 + Credit.GetHashCode();
                    if (Debit != null)
                    hashCode = hashCode * 59 + Debit.GetHashCode();
                    if (OpeningBalance != null)
                    hashCode = hashCode * 59 + OpeningBalance.GetHashCode();
                    if (Balance != null)
                    hashCode = hashCode * 59 + Balance.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(InlineResponse20016Data left, InlineResponse20016Data right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(InlineResponse20016Data left, InlineResponse20016Data right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
