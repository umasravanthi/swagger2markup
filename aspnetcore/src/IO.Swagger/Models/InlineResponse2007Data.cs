/*
 * API Documentation
 *
 * defaultDeription
 *
 * OpenAPI spec version: 1.0.0-oas3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class InlineResponse2007Data : IEquatable<InlineResponse2007Data>
    { 
        /// <summary>
        /// Gets or Sets HeaderId
        /// </summary>
        [DataMember(Name="HeaderId")]
        public int? HeaderId { get; set; }

        /// <summary>
        /// Gets or Sets VoucherNo
        /// </summary>
        [DataMember(Name="VoucherNo")]
        public string VoucherNo { get; set; }

        /// <summary>
        /// Gets or Sets BodyIds
        /// </summary>
        [DataMember(Name="BodyIds")]
        public List<int?> BodyIds { get; set; }

        /// <summary>
        /// Gets or Sets TransIds
        /// </summary>
        [DataMember(Name="TransIds")]
        public List<int?> TransIds { get; set; }

        /// <summary>
        /// Gets or Sets Errors
        /// </summary>
        [DataMember(Name="Errors")]
        public string Errors { get; set; }

        /// <summary>
        /// Gets or Sets Posted
        /// </summary>
        [DataMember(Name="Posted")]
        public bool? Posted { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponse2007Data {\n");
            sb.Append("  HeaderId: ").Append(HeaderId).Append("\n");
            sb.Append("  VoucherNo: ").Append(VoucherNo).Append("\n");
            sb.Append("  BodyIds: ").Append(BodyIds).Append("\n");
            sb.Append("  TransIds: ").Append(TransIds).Append("\n");
            sb.Append("  Errors: ").Append(Errors).Append("\n");
            sb.Append("  Posted: ").Append(Posted).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((InlineResponse2007Data)obj);
        }

        /// <summary>
        /// Returns true if InlineResponse2007Data instances are equal
        /// </summary>
        /// <param name="other">Instance of InlineResponse2007Data to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse2007Data other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    HeaderId == other.HeaderId ||
                    HeaderId != null &&
                    HeaderId.Equals(other.HeaderId)
                ) && 
                (
                    VoucherNo == other.VoucherNo ||
                    VoucherNo != null &&
                    VoucherNo.Equals(other.VoucherNo)
                ) && 
                (
                    BodyIds == other.BodyIds ||
                    BodyIds != null &&
                    BodyIds.SequenceEqual(other.BodyIds)
                ) && 
                (
                    TransIds == other.TransIds ||
                    TransIds != null &&
                    TransIds.SequenceEqual(other.TransIds)
                ) && 
                (
                    Errors == other.Errors ||
                    Errors != null &&
                    Errors.Equals(other.Errors)
                ) && 
                (
                    Posted == other.Posted ||
                    Posted != null &&
                    Posted.Equals(other.Posted)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (HeaderId != null)
                    hashCode = hashCode * 59 + HeaderId.GetHashCode();
                    if (VoucherNo != null)
                    hashCode = hashCode * 59 + VoucherNo.GetHashCode();
                    if (BodyIds != null)
                    hashCode = hashCode * 59 + BodyIds.GetHashCode();
                    if (TransIds != null)
                    hashCode = hashCode * 59 + TransIds.GetHashCode();
                    if (Errors != null)
                    hashCode = hashCode * 59 + Errors.GetHashCode();
                    if (Posted != null)
                    hashCode = hashCode * 59 + Posted.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(InlineResponse2007Data left, InlineResponse2007Data right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(InlineResponse2007Data left, InlineResponse2007Data right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
