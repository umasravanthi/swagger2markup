/*
 * API Documentation
 *
 * defaultDeription
 *
 * OpenAPI spec version: 1.0.0-oas3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class InlineResponse2006Body : IEquatable<InlineResponse2006Body>
    { 
        /// <summary>
        /// Gets or Sets WarehouseId
        /// </summary>
        [DataMember(Name="Warehouse__Id")]
        public int? WarehouseId { get; set; }

        /// <summary>
        /// Gets or Sets InventoryAllocationStatusName
        /// </summary>
        [DataMember(Name="Inventory Allocation Status__Name")]
        public string InventoryAllocationStatusName { get; set; }

        /// <summary>
        /// Gets or Sets ProductId
        /// </summary>
        [DataMember(Name="Product__Id")]
        public int? ProductId { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="Description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Quantity
        /// </summary>
        [DataMember(Name="Quantity")]
        public int? Quantity { get; set; }

        /// <summary>
        /// Gets or Sets Rate
        /// </summary>
        [DataMember(Name="Rate")]
        public int? Rate { get; set; }

        /// <summary>
        /// Gets or Sets Gross
        /// </summary>
        [DataMember(Name="Gross")]
        public int? Gross { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponse2006Body {\n");
            sb.Append("  WarehouseId: ").Append(WarehouseId).Append("\n");
            sb.Append("  InventoryAllocationStatusName: ").Append(InventoryAllocationStatusName).Append("\n");
            sb.Append("  ProductId: ").Append(ProductId).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  Rate: ").Append(Rate).Append("\n");
            sb.Append("  Gross: ").Append(Gross).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((InlineResponse2006Body)obj);
        }

        /// <summary>
        /// Returns true if InlineResponse2006Body instances are equal
        /// </summary>
        /// <param name="other">Instance of InlineResponse2006Body to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse2006Body other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    WarehouseId == other.WarehouseId ||
                    WarehouseId != null &&
                    WarehouseId.Equals(other.WarehouseId)
                ) && 
                (
                    InventoryAllocationStatusName == other.InventoryAllocationStatusName ||
                    InventoryAllocationStatusName != null &&
                    InventoryAllocationStatusName.Equals(other.InventoryAllocationStatusName)
                ) && 
                (
                    ProductId == other.ProductId ||
                    ProductId != null &&
                    ProductId.Equals(other.ProductId)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    Quantity == other.Quantity ||
                    Quantity != null &&
                    Quantity.Equals(other.Quantity)
                ) && 
                (
                    Rate == other.Rate ||
                    Rate != null &&
                    Rate.Equals(other.Rate)
                ) && 
                (
                    Gross == other.Gross ||
                    Gross != null &&
                    Gross.Equals(other.Gross)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (WarehouseId != null)
                    hashCode = hashCode * 59 + WarehouseId.GetHashCode();
                    if (InventoryAllocationStatusName != null)
                    hashCode = hashCode * 59 + InventoryAllocationStatusName.GetHashCode();
                    if (ProductId != null)
                    hashCode = hashCode * 59 + ProductId.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (Quantity != null)
                    hashCode = hashCode * 59 + Quantity.GetHashCode();
                    if (Rate != null)
                    hashCode = hashCode * 59 + Rate.GetHashCode();
                    if (Gross != null)
                    hashCode = hashCode * 59 + Gross.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(InlineResponse2006Body left, InlineResponse2006Body right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(InlineResponse2006Body left, InlineResponse2006Body right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
