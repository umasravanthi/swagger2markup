/*
 * API Documentation
 *
 * defaultDeription
 *
 * OpenAPI spec version: 1.0.0-oas3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class InlineResponse20015Data : IEquatable<InlineResponse20015Data>
    { 
        /// <summary>
        /// Gets or Sets CheckNegativeStockAction
        /// </summary>
        [DataMember(Name="CheckNegativeStockAction")]
        public int? CheckNegativeStockAction { get; set; }

        /// <summary>
        /// Gets or Sets SellingRate
        /// </summary>
        [DataMember(Name="SellingRate")]
        public int? SellingRate { get; set; }

        /// <summary>
        /// Gets or Sets FaTagId
        /// </summary>
        [DataMember(Name="FaTagId")]
        public int? FaTagId { get; set; }

        /// <summary>
        /// Gets or Sets InvTagId
        /// </summary>
        [DataMember(Name="InvTagId")]
        public int? InvTagId { get; set; }

        /// <summary>
        /// Gets or Sets CheckOverdueBillsAction
        /// </summary>
        [DataMember(Name="CheckOverdueBillsAction")]
        public int? CheckOverdueBillsAction { get; set; }

        /// <summary>
        /// Gets or Sets CheckReorderAction
        /// </summary>
        [DataMember(Name="CheckReorderAction")]
        public int? CheckReorderAction { get; set; }

        /// <summary>
        /// Gets or Sets DefCurrency
        /// </summary>
        [DataMember(Name="DefCurrency")]
        public List<InlineResponse20015DefCurrency> DefCurrency { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponse20015Data {\n");
            sb.Append("  CheckNegativeStockAction: ").Append(CheckNegativeStockAction).Append("\n");
            sb.Append("  SellingRate: ").Append(SellingRate).Append("\n");
            sb.Append("  FaTagId: ").Append(FaTagId).Append("\n");
            sb.Append("  InvTagId: ").Append(InvTagId).Append("\n");
            sb.Append("  CheckOverdueBillsAction: ").Append(CheckOverdueBillsAction).Append("\n");
            sb.Append("  CheckReorderAction: ").Append(CheckReorderAction).Append("\n");
            sb.Append("  DefCurrency: ").Append(DefCurrency).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((InlineResponse20015Data)obj);
        }

        /// <summary>
        /// Returns true if InlineResponse20015Data instances are equal
        /// </summary>
        /// <param name="other">Instance of InlineResponse20015Data to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse20015Data other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    CheckNegativeStockAction == other.CheckNegativeStockAction ||
                    CheckNegativeStockAction != null &&
                    CheckNegativeStockAction.Equals(other.CheckNegativeStockAction)
                ) && 
                (
                    SellingRate == other.SellingRate ||
                    SellingRate != null &&
                    SellingRate.Equals(other.SellingRate)
                ) && 
                (
                    FaTagId == other.FaTagId ||
                    FaTagId != null &&
                    FaTagId.Equals(other.FaTagId)
                ) && 
                (
                    InvTagId == other.InvTagId ||
                    InvTagId != null &&
                    InvTagId.Equals(other.InvTagId)
                ) && 
                (
                    CheckOverdueBillsAction == other.CheckOverdueBillsAction ||
                    CheckOverdueBillsAction != null &&
                    CheckOverdueBillsAction.Equals(other.CheckOverdueBillsAction)
                ) && 
                (
                    CheckReorderAction == other.CheckReorderAction ||
                    CheckReorderAction != null &&
                    CheckReorderAction.Equals(other.CheckReorderAction)
                ) && 
                (
                    DefCurrency == other.DefCurrency ||
                    DefCurrency != null &&
                    DefCurrency.SequenceEqual(other.DefCurrency)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (CheckNegativeStockAction != null)
                    hashCode = hashCode * 59 + CheckNegativeStockAction.GetHashCode();
                    if (SellingRate != null)
                    hashCode = hashCode * 59 + SellingRate.GetHashCode();
                    if (FaTagId != null)
                    hashCode = hashCode * 59 + FaTagId.GetHashCode();
                    if (InvTagId != null)
                    hashCode = hashCode * 59 + InvTagId.GetHashCode();
                    if (CheckOverdueBillsAction != null)
                    hashCode = hashCode * 59 + CheckOverdueBillsAction.GetHashCode();
                    if (CheckReorderAction != null)
                    hashCode = hashCode * 59 + CheckReorderAction.GetHashCode();
                    if (DefCurrency != null)
                    hashCode = hashCode * 59 + DefCurrency.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(InlineResponse20015Data left, InlineResponse20015Data right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(InlineResponse20015Data left, InlineResponse20015Data right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
