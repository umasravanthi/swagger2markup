/*
 * API Documentation
 *
 * defaultDeription
 *
 * OpenAPI spec version: 1.0.0-oas3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class InlineResponse20018Data : IEquatable<InlineResponse20018Data>
    { 
        /// <summary>
        /// Gets or Sets Index
        /// </summary>
        [DataMember(Name="Index")]
        public int? Index { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="Name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Purpose
        /// </summary>
        [DataMember(Name="Purpose")]
        public int? Purpose { get; set; }

        /// <summary>
        /// Gets or Sets Code
        /// </summary>
        [DataMember(Name="Code")]
        public string Code { get; set; }

        /// <summary>
        /// Gets or Sets CreatedDateTime
        /// </summary>
        [DataMember(Name="CreatedDateTime")]
        public string CreatedDateTime { get; set; }

        /// <summary>
        /// Gets or Sets DateTime
        /// </summary>
        [DataMember(Name="DateTime")]
        public string DateTime { get; set; }

        /// <summary>
        /// Gets or Sets ScreenId
        /// </summary>
        [DataMember(Name="ScreenId")]
        public int? ScreenId { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="Status")]
        public int? Status { get; set; }

        /// <summary>
        /// Gets or Sets AlertId
        /// </summary>
        [DataMember(Name="AlertId")]
        public int? AlertId { get; set; }

        /// <summary>
        /// Gets or Sets ModuleId
        /// </summary>
        [DataMember(Name="ModuleId")]
        public int? ModuleId { get; set; }

        /// <summary>
        /// Gets or Sets Snooze
        /// </summary>
        [DataMember(Name="Snooze")]
        public string Snooze { get; set; }

        /// <summary>
        /// Gets or Sets RecordId
        /// </summary>
        [DataMember(Name="RecordId")]
        public int? RecordId { get; set; }

        /// <summary>
        /// Gets or Sets Message
        /// </summary>
        [DataMember(Name="Message")]
        public string Message { get; set; }

        /// <summary>
        /// Gets or Sets Params
        /// </summary>
        [DataMember(Name="Params")]
        public int? Params { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponse20018Data {\n");
            sb.Append("  Index: ").Append(Index).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Purpose: ").Append(Purpose).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  CreatedDateTime: ").Append(CreatedDateTime).Append("\n");
            sb.Append("  DateTime: ").Append(DateTime).Append("\n");
            sb.Append("  ScreenId: ").Append(ScreenId).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  AlertId: ").Append(AlertId).Append("\n");
            sb.Append("  ModuleId: ").Append(ModuleId).Append("\n");
            sb.Append("  Snooze: ").Append(Snooze).Append("\n");
            sb.Append("  RecordId: ").Append(RecordId).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  Params: ").Append(Params).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((InlineResponse20018Data)obj);
        }

        /// <summary>
        /// Returns true if InlineResponse20018Data instances are equal
        /// </summary>
        /// <param name="other">Instance of InlineResponse20018Data to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse20018Data other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Index == other.Index ||
                    Index != null &&
                    Index.Equals(other.Index)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Purpose == other.Purpose ||
                    Purpose != null &&
                    Purpose.Equals(other.Purpose)
                ) && 
                (
                    Code == other.Code ||
                    Code != null &&
                    Code.Equals(other.Code)
                ) && 
                (
                    CreatedDateTime == other.CreatedDateTime ||
                    CreatedDateTime != null &&
                    CreatedDateTime.Equals(other.CreatedDateTime)
                ) && 
                (
                    DateTime == other.DateTime ||
                    DateTime != null &&
                    DateTime.Equals(other.DateTime)
                ) && 
                (
                    ScreenId == other.ScreenId ||
                    ScreenId != null &&
                    ScreenId.Equals(other.ScreenId)
                ) && 
                (
                    Status == other.Status ||
                    Status != null &&
                    Status.Equals(other.Status)
                ) && 
                (
                    AlertId == other.AlertId ||
                    AlertId != null &&
                    AlertId.Equals(other.AlertId)
                ) && 
                (
                    ModuleId == other.ModuleId ||
                    ModuleId != null &&
                    ModuleId.Equals(other.ModuleId)
                ) && 
                (
                    Snooze == other.Snooze ||
                    Snooze != null &&
                    Snooze.Equals(other.Snooze)
                ) && 
                (
                    RecordId == other.RecordId ||
                    RecordId != null &&
                    RecordId.Equals(other.RecordId)
                ) && 
                (
                    Message == other.Message ||
                    Message != null &&
                    Message.Equals(other.Message)
                ) && 
                (
                    Params == other.Params ||
                    Params != null &&
                    Params.Equals(other.Params)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Index != null)
                    hashCode = hashCode * 59 + Index.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Purpose != null)
                    hashCode = hashCode * 59 + Purpose.GetHashCode();
                    if (Code != null)
                    hashCode = hashCode * 59 + Code.GetHashCode();
                    if (CreatedDateTime != null)
                    hashCode = hashCode * 59 + CreatedDateTime.GetHashCode();
                    if (DateTime != null)
                    hashCode = hashCode * 59 + DateTime.GetHashCode();
                    if (ScreenId != null)
                    hashCode = hashCode * 59 + ScreenId.GetHashCode();
                    if (Status != null)
                    hashCode = hashCode * 59 + Status.GetHashCode();
                    if (AlertId != null)
                    hashCode = hashCode * 59 + AlertId.GetHashCode();
                    if (ModuleId != null)
                    hashCode = hashCode * 59 + ModuleId.GetHashCode();
                    if (Snooze != null)
                    hashCode = hashCode * 59 + Snooze.GetHashCode();
                    if (RecordId != null)
                    hashCode = hashCode * 59 + RecordId.GetHashCode();
                    if (Message != null)
                    hashCode = hashCode * 59 + Message.GetHashCode();
                    if (Params != null)
                    hashCode = hashCode * 59 + Params.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(InlineResponse20018Data left, InlineResponse20018Data right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(InlineResponse20018Data left, InlineResponse20018Data right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
