/*
 * API Documentation
 *
 * defaultDeription
 *
 * OpenAPI spec version: 1.0.0-oas3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Model8APITransactionsBatchesData : IEquatable<Model8APITransactionsBatchesData>
    { 
        /// <summary>
        /// Gets or Sets Voucherno
        /// </summary>
        [DataMember(Name="voucherno")]
        public string Voucherno { get; set; }

        /// <summary>
        /// Gets or Sets Invtagid
        /// </summary>
        [DataMember(Name="invtagid")]
        public string Invtagid { get; set; }

        /// <summary>
        /// Gets or Sets Vouchertype
        /// </summary>
        [DataMember(Name="vouchertype")]
        public string Vouchertype { get; set; }

        /// <summary>
        /// Gets or Sets ProductCode
        /// </summary>
        [DataMember(Name="product__code")]
        public string ProductCode { get; set; }

        /// <summary>
        /// Gets or Sets Voucherdate
        /// </summary>
        [DataMember(Name="voucherdate")]
        public string Voucherdate { get; set; }

        /// <summary>
        /// Gets or Sets BatchNo
        /// </summary>
        [DataMember(Name="BatchNo")]
        public string BatchNo { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Model8APITransactionsBatchesData {\n");
            sb.Append("  Voucherno: ").Append(Voucherno).Append("\n");
            sb.Append("  Invtagid: ").Append(Invtagid).Append("\n");
            sb.Append("  Vouchertype: ").Append(Vouchertype).Append("\n");
            sb.Append("  ProductCode: ").Append(ProductCode).Append("\n");
            sb.Append("  Voucherdate: ").Append(Voucherdate).Append("\n");
            sb.Append("  BatchNo: ").Append(BatchNo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Model8APITransactionsBatchesData)obj);
        }

        /// <summary>
        /// Returns true if Model8APITransactionsBatchesData instances are equal
        /// </summary>
        /// <param name="other">Instance of Model8APITransactionsBatchesData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Model8APITransactionsBatchesData other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Voucherno == other.Voucherno ||
                    Voucherno != null &&
                    Voucherno.Equals(other.Voucherno)
                ) && 
                (
                    Invtagid == other.Invtagid ||
                    Invtagid != null &&
                    Invtagid.Equals(other.Invtagid)
                ) && 
                (
                    Vouchertype == other.Vouchertype ||
                    Vouchertype != null &&
                    Vouchertype.Equals(other.Vouchertype)
                ) && 
                (
                    ProductCode == other.ProductCode ||
                    ProductCode != null &&
                    ProductCode.Equals(other.ProductCode)
                ) && 
                (
                    Voucherdate == other.Voucherdate ||
                    Voucherdate != null &&
                    Voucherdate.Equals(other.Voucherdate)
                ) && 
                (
                    BatchNo == other.BatchNo ||
                    BatchNo != null &&
                    BatchNo.Equals(other.BatchNo)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Voucherno != null)
                    hashCode = hashCode * 59 + Voucherno.GetHashCode();
                    if (Invtagid != null)
                    hashCode = hashCode * 59 + Invtagid.GetHashCode();
                    if (Vouchertype != null)
                    hashCode = hashCode * 59 + Vouchertype.GetHashCode();
                    if (ProductCode != null)
                    hashCode = hashCode * 59 + ProductCode.GetHashCode();
                    if (Voucherdate != null)
                    hashCode = hashCode * 59 + Voucherdate.GetHashCode();
                    if (BatchNo != null)
                    hashCode = hashCode * 59 + BatchNo.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Model8APITransactionsBatchesData left, Model8APITransactionsBatchesData right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Model8APITransactionsBatchesData left, Model8APITransactionsBatchesData right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
