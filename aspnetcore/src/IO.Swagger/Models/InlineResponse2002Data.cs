/*
 * API Documentation
 *
 * defaultDeription
 *
 * OpenAPI spec version: 1.0.0-oas3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class InlineResponse2002Data : IEquatable<InlineResponse2002Data>
    { 
        /// <summary>
        /// Gets or Sets IAccountType
        /// </summary>
        [DataMember(Name="iAccountType")]
        public int? IAccountType { get; set; }

        /// <summary>
        /// Gets or Sets IDeliveryCityName
        /// </summary>
        [DataMember(Name="iDeliveryCity__Name")]
        public string IDeliveryCityName { get; set; }

        /// <summary>
        /// Gets or Sets ICreatedDate
        /// </summary>
        [DataMember(Name="iCreatedDate")]
        public string ICreatedDate { get; set; }

        /// <summary>
        /// Gets or Sets Alias
        /// </summary>
        [DataMember(Name="Alias")]
        public string Alias { get; set; }

        /// <summary>
        /// Gets or Sets IStatus
        /// </summary>
        [DataMember(Name="iStatus")]
        public int? IStatus { get; set; }

        /// <summary>
        /// Gets or Sets SCode
        /// </summary>
        [DataMember(Name="sCode")]
        public string SCode { get; set; }

        /// <summary>
        /// Gets or Sets BinCapacity
        /// </summary>
        [DataMember(Name="BinCapacity")]
        public int? BinCapacity { get; set; }

        /// <summary>
        /// Gets or Sets IPDCDiscountedACName
        /// </summary>
        [DataMember(Name="iPDCDiscountedAC__Name")]
        public string IPDCDiscountedACName { get; set; }

        /// <summary>
        /// Gets or Sets SName
        /// </summary>
        [DataMember(Name="sName")]
        public string SName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponse2002Data {\n");
            sb.Append("  IAccountType: ").Append(IAccountType).Append("\n");
            sb.Append("  IDeliveryCityName: ").Append(IDeliveryCityName).Append("\n");
            sb.Append("  ICreatedDate: ").Append(ICreatedDate).Append("\n");
            sb.Append("  Alias: ").Append(Alias).Append("\n");
            sb.Append("  IStatus: ").Append(IStatus).Append("\n");
            sb.Append("  SCode: ").Append(SCode).Append("\n");
            sb.Append("  BinCapacity: ").Append(BinCapacity).Append("\n");
            sb.Append("  IPDCDiscountedACName: ").Append(IPDCDiscountedACName).Append("\n");
            sb.Append("  SName: ").Append(SName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((InlineResponse2002Data)obj);
        }

        /// <summary>
        /// Returns true if InlineResponse2002Data instances are equal
        /// </summary>
        /// <param name="other">Instance of InlineResponse2002Data to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse2002Data other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    IAccountType == other.IAccountType ||
                    IAccountType != null &&
                    IAccountType.Equals(other.IAccountType)
                ) && 
                (
                    IDeliveryCityName == other.IDeliveryCityName ||
                    IDeliveryCityName != null &&
                    IDeliveryCityName.Equals(other.IDeliveryCityName)
                ) && 
                (
                    ICreatedDate == other.ICreatedDate ||
                    ICreatedDate != null &&
                    ICreatedDate.Equals(other.ICreatedDate)
                ) && 
                (
                    Alias == other.Alias ||
                    Alias != null &&
                    Alias.Equals(other.Alias)
                ) && 
                (
                    IStatus == other.IStatus ||
                    IStatus != null &&
                    IStatus.Equals(other.IStatus)
                ) && 
                (
                    SCode == other.SCode ||
                    SCode != null &&
                    SCode.Equals(other.SCode)
                ) && 
                (
                    BinCapacity == other.BinCapacity ||
                    BinCapacity != null &&
                    BinCapacity.Equals(other.BinCapacity)
                ) && 
                (
                    IPDCDiscountedACName == other.IPDCDiscountedACName ||
                    IPDCDiscountedACName != null &&
                    IPDCDiscountedACName.Equals(other.IPDCDiscountedACName)
                ) && 
                (
                    SName == other.SName ||
                    SName != null &&
                    SName.Equals(other.SName)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (IAccountType != null)
                    hashCode = hashCode * 59 + IAccountType.GetHashCode();
                    if (IDeliveryCityName != null)
                    hashCode = hashCode * 59 + IDeliveryCityName.GetHashCode();
                    if (ICreatedDate != null)
                    hashCode = hashCode * 59 + ICreatedDate.GetHashCode();
                    if (Alias != null)
                    hashCode = hashCode * 59 + Alias.GetHashCode();
                    if (IStatus != null)
                    hashCode = hashCode * 59 + IStatus.GetHashCode();
                    if (SCode != null)
                    hashCode = hashCode * 59 + SCode.GetHashCode();
                    if (BinCapacity != null)
                    hashCode = hashCode * 59 + BinCapacity.GetHashCode();
                    if (IPDCDiscountedACName != null)
                    hashCode = hashCode * 59 + IPDCDiscountedACName.GetHashCode();
                    if (SName != null)
                    hashCode = hashCode * 59 + SName.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(InlineResponse2002Data left, InlineResponse2002Data right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(InlineResponse2002Data left, InlineResponse2002Data right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
