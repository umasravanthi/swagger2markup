/*
 * API Documentation
 *
 * defaultDeription
 *
 * OpenAPI spec version: 1.0.0-oas3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class InlineResponse20011Parameters : IEquatable<InlineResponse20011Parameters>
    { 
        /// <summary>
        /// Gets or Sets FieldVariable
        /// </summary>
        [DataMember(Name="FieldVariable")]
        public string FieldVariable { get; set; }

        /// <summary>
        /// Gets or Sets ControlId
        /// </summary>
        [DataMember(Name="ControlId")]
        public int? ControlId { get; set; }

        /// <summary>
        /// Gets or Sets SubParentId
        /// </summary>
        [DataMember(Name="SubParentId")]
        public int? SubParentId { get; set; }

        /// <summary>
        /// Gets or Sets IsDefualt
        /// </summary>
        [DataMember(Name="IsDefualt")]
        public int? IsDefualt { get; set; }

        /// <summary>
        /// Gets or Sets FieldId
        /// </summary>
        [DataMember(Name="FieldId")]
        public string FieldId { get; set; }

        /// <summary>
        /// Gets or Sets FieldName
        /// </summary>
        [DataMember(Name="FieldName")]
        public string FieldName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponse20011Parameters {\n");
            sb.Append("  FieldVariable: ").Append(FieldVariable).Append("\n");
            sb.Append("  ControlId: ").Append(ControlId).Append("\n");
            sb.Append("  SubParentId: ").Append(SubParentId).Append("\n");
            sb.Append("  IsDefualt: ").Append(IsDefualt).Append("\n");
            sb.Append("  FieldId: ").Append(FieldId).Append("\n");
            sb.Append("  FieldName: ").Append(FieldName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((InlineResponse20011Parameters)obj);
        }

        /// <summary>
        /// Returns true if InlineResponse20011Parameters instances are equal
        /// </summary>
        /// <param name="other">Instance of InlineResponse20011Parameters to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse20011Parameters other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    FieldVariable == other.FieldVariable ||
                    FieldVariable != null &&
                    FieldVariable.Equals(other.FieldVariable)
                ) && 
                (
                    ControlId == other.ControlId ||
                    ControlId != null &&
                    ControlId.Equals(other.ControlId)
                ) && 
                (
                    SubParentId == other.SubParentId ||
                    SubParentId != null &&
                    SubParentId.Equals(other.SubParentId)
                ) && 
                (
                    IsDefualt == other.IsDefualt ||
                    IsDefualt != null &&
                    IsDefualt.Equals(other.IsDefualt)
                ) && 
                (
                    FieldId == other.FieldId ||
                    FieldId != null &&
                    FieldId.Equals(other.FieldId)
                ) && 
                (
                    FieldName == other.FieldName ||
                    FieldName != null &&
                    FieldName.Equals(other.FieldName)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (FieldVariable != null)
                    hashCode = hashCode * 59 + FieldVariable.GetHashCode();
                    if (ControlId != null)
                    hashCode = hashCode * 59 + ControlId.GetHashCode();
                    if (SubParentId != null)
                    hashCode = hashCode * 59 + SubParentId.GetHashCode();
                    if (IsDefualt != null)
                    hashCode = hashCode * 59 + IsDefualt.GetHashCode();
                    if (FieldId != null)
                    hashCode = hashCode * 59 + FieldId.GetHashCode();
                    if (FieldName != null)
                    hashCode = hashCode * 59 + FieldName.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(InlineResponse20011Parameters left, InlineResponse20011Parameters right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(InlineResponse20011Parameters left, InlineResponse20011Parameters right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
