/*
 * API Documentation
 *
 * defaultDeription
 *
 * OpenAPI spec version: 1.0.0-oas3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class InlineResponse2001Data : IEquatable<InlineResponse2001Data>
    { 
        /// <summary>
        /// Gets or Sets VoucherType
        /// </summary>
        [DataMember(Name="VoucherType")]
        public string VoucherType { get; set; }

        /// <summary>
        /// Gets or Sets VoucherOrder
        /// </summary>
        [DataMember(Name="VoucherOrder")]
        public string VoucherOrder { get; set; }

        /// <summary>
        /// Gets or Sets Inventory
        /// </summary>
        [DataMember(Name="Inventory")]
        public string Inventory { get; set; }

        /// <summary>
        /// Gets or Sets PostExchangeRateDiff
        /// </summary>
        [DataMember(Name="PostExchangeRateDiff")]
        public string PostExchangeRateDiff { get; set; }

        /// <summary>
        /// Gets or Sets DefAccCode
        /// </summary>
        [DataMember(Name="DefAcc__Code")]
        public string DefAccCode { get; set; }

        /// <summary>
        /// Gets or Sets MenuGroupId
        /// </summary>
        [DataMember(Name="MenuGroupId")]
        public string MenuGroupId { get; set; }

        /// <summary>
        /// Gets or Sets InputExchangeRate
        /// </summary>
        [DataMember(Name="InputExchangeRate")]
        public string InputExchangeRate { get; set; }

        /// <summary>
        /// Gets or Sets Abbr
        /// </summary>
        [DataMember(Name="Abbr")]
        public string Abbr { get; set; }

        /// <summary>
        /// Gets or Sets LinkSeq
        /// </summary>
        [DataMember(Name="LinkSeq")]
        public string LinkSeq { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponse2001Data {\n");
            sb.Append("  VoucherType: ").Append(VoucherType).Append("\n");
            sb.Append("  VoucherOrder: ").Append(VoucherOrder).Append("\n");
            sb.Append("  Inventory: ").Append(Inventory).Append("\n");
            sb.Append("  PostExchangeRateDiff: ").Append(PostExchangeRateDiff).Append("\n");
            sb.Append("  DefAccCode: ").Append(DefAccCode).Append("\n");
            sb.Append("  MenuGroupId: ").Append(MenuGroupId).Append("\n");
            sb.Append("  InputExchangeRate: ").Append(InputExchangeRate).Append("\n");
            sb.Append("  Abbr: ").Append(Abbr).Append("\n");
            sb.Append("  LinkSeq: ").Append(LinkSeq).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((InlineResponse2001Data)obj);
        }

        /// <summary>
        /// Returns true if InlineResponse2001Data instances are equal
        /// </summary>
        /// <param name="other">Instance of InlineResponse2001Data to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse2001Data other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    VoucherType == other.VoucherType ||
                    VoucherType != null &&
                    VoucherType.Equals(other.VoucherType)
                ) && 
                (
                    VoucherOrder == other.VoucherOrder ||
                    VoucherOrder != null &&
                    VoucherOrder.Equals(other.VoucherOrder)
                ) && 
                (
                    Inventory == other.Inventory ||
                    Inventory != null &&
                    Inventory.Equals(other.Inventory)
                ) && 
                (
                    PostExchangeRateDiff == other.PostExchangeRateDiff ||
                    PostExchangeRateDiff != null &&
                    PostExchangeRateDiff.Equals(other.PostExchangeRateDiff)
                ) && 
                (
                    DefAccCode == other.DefAccCode ||
                    DefAccCode != null &&
                    DefAccCode.Equals(other.DefAccCode)
                ) && 
                (
                    MenuGroupId == other.MenuGroupId ||
                    MenuGroupId != null &&
                    MenuGroupId.Equals(other.MenuGroupId)
                ) && 
                (
                    InputExchangeRate == other.InputExchangeRate ||
                    InputExchangeRate != null &&
                    InputExchangeRate.Equals(other.InputExchangeRate)
                ) && 
                (
                    Abbr == other.Abbr ||
                    Abbr != null &&
                    Abbr.Equals(other.Abbr)
                ) && 
                (
                    LinkSeq == other.LinkSeq ||
                    LinkSeq != null &&
                    LinkSeq.Equals(other.LinkSeq)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (VoucherType != null)
                    hashCode = hashCode * 59 + VoucherType.GetHashCode();
                    if (VoucherOrder != null)
                    hashCode = hashCode * 59 + VoucherOrder.GetHashCode();
                    if (Inventory != null)
                    hashCode = hashCode * 59 + Inventory.GetHashCode();
                    if (PostExchangeRateDiff != null)
                    hashCode = hashCode * 59 + PostExchangeRateDiff.GetHashCode();
                    if (DefAccCode != null)
                    hashCode = hashCode * 59 + DefAccCode.GetHashCode();
                    if (MenuGroupId != null)
                    hashCode = hashCode * 59 + MenuGroupId.GetHashCode();
                    if (InputExchangeRate != null)
                    hashCode = hashCode * 59 + InputExchangeRate.GetHashCode();
                    if (Abbr != null)
                    hashCode = hashCode * 59 + Abbr.GetHashCode();
                    if (LinkSeq != null)
                    hashCode = hashCode * 59 + LinkSeq.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(InlineResponse2001Data left, InlineResponse2001Data right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(InlineResponse2001Data left, InlineResponse2001Data right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
