/*
 * API Documentation
 *
 * defaultDeription
 *
 * OpenAPI spec version: 1.0.0-oas3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class InlineResponse20013Data : IEquatable<InlineResponse20013Data>
    { 
        /// <summary>
        /// Gets or Sets Active
        /// </summary>
        [DataMember(Name="Active")]
        public string Active { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="Description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="Name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets UserOrRoleId
        /// </summary>
        [DataMember(Name="UserOrRoleId")]
        public string UserOrRoleId { get; set; }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [DataMember(Name="UserId")]
        public string UserId { get; set; }

        /// <summary>
        /// Gets or Sets Default
        /// </summary>
        [DataMember(Name="Default")]
        public string Default { get; set; }

        /// <summary>
        /// Gets or Sets FontHeader
        /// </summary>
        [DataMember(Name="FontHeader")]
        public string FontHeader { get; set; }

        /// <summary>
        /// Gets or Sets DashboardId
        /// </summary>
        [DataMember(Name="DashboardId")]
        public string DashboardId { get; set; }

        /// <summary>
        /// Gets or Sets SetAsDefault
        /// </summary>
        [DataMember(Name="SetAsDefault")]
        public string SetAsDefault { get; set; }

        /// <summary>
        /// Gets or Sets FontFooter
        /// </summary>
        [DataMember(Name="FontFooter")]
        public string FontFooter { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponse20013Data {\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  UserOrRoleId: ").Append(UserOrRoleId).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  Default: ").Append(Default).Append("\n");
            sb.Append("  FontHeader: ").Append(FontHeader).Append("\n");
            sb.Append("  DashboardId: ").Append(DashboardId).Append("\n");
            sb.Append("  SetAsDefault: ").Append(SetAsDefault).Append("\n");
            sb.Append("  FontFooter: ").Append(FontFooter).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((InlineResponse20013Data)obj);
        }

        /// <summary>
        /// Returns true if InlineResponse20013Data instances are equal
        /// </summary>
        /// <param name="other">Instance of InlineResponse20013Data to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse20013Data other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Active == other.Active ||
                    Active != null &&
                    Active.Equals(other.Active)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    UserOrRoleId == other.UserOrRoleId ||
                    UserOrRoleId != null &&
                    UserOrRoleId.Equals(other.UserOrRoleId)
                ) && 
                (
                    UserId == other.UserId ||
                    UserId != null &&
                    UserId.Equals(other.UserId)
                ) && 
                (
                    Default == other.Default ||
                    Default != null &&
                    Default.Equals(other.Default)
                ) && 
                (
                    FontHeader == other.FontHeader ||
                    FontHeader != null &&
                    FontHeader.Equals(other.FontHeader)
                ) && 
                (
                    DashboardId == other.DashboardId ||
                    DashboardId != null &&
                    DashboardId.Equals(other.DashboardId)
                ) && 
                (
                    SetAsDefault == other.SetAsDefault ||
                    SetAsDefault != null &&
                    SetAsDefault.Equals(other.SetAsDefault)
                ) && 
                (
                    FontFooter == other.FontFooter ||
                    FontFooter != null &&
                    FontFooter.Equals(other.FontFooter)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Active != null)
                    hashCode = hashCode * 59 + Active.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (UserOrRoleId != null)
                    hashCode = hashCode * 59 + UserOrRoleId.GetHashCode();
                    if (UserId != null)
                    hashCode = hashCode * 59 + UserId.GetHashCode();
                    if (Default != null)
                    hashCode = hashCode * 59 + Default.GetHashCode();
                    if (FontHeader != null)
                    hashCode = hashCode * 59 + FontHeader.GetHashCode();
                    if (DashboardId != null)
                    hashCode = hashCode * 59 + DashboardId.GetHashCode();
                    if (SetAsDefault != null)
                    hashCode = hashCode * 59 + SetAsDefault.GetHashCode();
                    if (FontFooter != null)
                    hashCode = hashCode * 59 + FontFooter.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(InlineResponse20013Data left, InlineResponse20013Data right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(InlineResponse20013Data left, InlineResponse20013Data right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
