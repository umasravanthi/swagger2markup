/*
 * API Documentation
 *
 * defaultDeription
 *
 * OpenAPI spec version: 1.0.0-oas3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class InlineResponse2006Header : IEquatable<InlineResponse2006Header>
    { 
        /// <summary>
        /// Gets or Sets DocNo
        /// </summary>
        [DataMember(Name="DocNo")]
        public string DocNo { get; set; }

        /// <summary>
        /// Gets or Sets Date
        /// </summary>
        [DataMember(Name="Date")]
        public int? Date { get; set; }

        /// <summary>
        /// Gets or Sets HeaderId
        /// </summary>
        [DataMember(Name="HeaderId")]
        public int? HeaderId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponse2006Header {\n");
            sb.Append("  DocNo: ").Append(DocNo).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  HeaderId: ").Append(HeaderId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((InlineResponse2006Header)obj);
        }

        /// <summary>
        /// Returns true if InlineResponse2006Header instances are equal
        /// </summary>
        /// <param name="other">Instance of InlineResponse2006Header to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse2006Header other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    DocNo == other.DocNo ||
                    DocNo != null &&
                    DocNo.Equals(other.DocNo)
                ) && 
                (
                    Date == other.Date ||
                    Date != null &&
                    Date.Equals(other.Date)
                ) && 
                (
                    HeaderId == other.HeaderId ||
                    HeaderId != null &&
                    HeaderId.Equals(other.HeaderId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (DocNo != null)
                    hashCode = hashCode * 59 + DocNo.GetHashCode();
                    if (Date != null)
                    hashCode = hashCode * 59 + Date.GetHashCode();
                    if (HeaderId != null)
                    hashCode = hashCode * 59 + HeaderId.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(InlineResponse2006Header left, InlineResponse2006Header right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(InlineResponse2006Header left, InlineResponse2006Header right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
