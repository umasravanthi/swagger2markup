/*
 * API Documentation
 *
 * defaultDeription
 *
 * OpenAPI spec version: 1.0.0-oas3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;
using IO.Swagger.Security;
using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class ReportsApiController : ControllerBase
    { 
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>To get the list of reports</remarks>
        /// <param name="accessToken"></param>
        /// <response code="200">Successfull operation</response>
        /// <response code="403">Forbidden - Access to the resource by the provider is forbidden</response>
        /// <response code="404">Not found - The requested resource is not found</response>
        /// <response code="502">Provider server error - Something went wrong on the Provider or Endpoint’s server      </response>
        [HttpGet]
        [Route("/8API/List/Reports")]
        [ValidateModelState]
        [SwaggerOperation("8APIListReportsGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(InlineResponse20010), description: "Successfull operation")]
        public virtual IActionResult 8APIListReportsGet([FromHeader]string accessToken)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(InlineResponse20010));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            //TODO: Uncomment the next line to return response 502 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(502);
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : 0,\n  \"data\" : [ {\n    \"ReportName\" : \"ReportName\",\n    \"ReportId\" : 6\n  }, {\n    \"ReportName\" : \"ReportName\",\n    \"ReportId\" : 6\n  } ],\n  \"message\" : \"message\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<InlineResponse20010>(exampleJson)
                        : default(InlineResponse20010);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>To get the ReportParameters</remarks>
        /// <param name="accessToken"></param>
        /// <response code="200">successful operation</response>
        /// <response code="403">Forbidden - Access to the resource by the provider is forbidden</response>
        /// <response code="404">Not found - The requested resource is not found</response>
        /// <response code="502">Provider server error - Something went wrong on the Provider or Endpoint’s server      </response>
        [HttpGet]
        [Route("/8API/List/Reports/ReportParameters/Stock Ledger")]
        [ValidateModelState]
        [SwaggerOperation("8APIListReportsReportParametersStockLedgerGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(InlineResponse20011), description: "successful operation")]
        public virtual IActionResult 8APIListReportsReportParametersStockLedgerGet([FromHeader]string accessToken)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(InlineResponse20011));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            //TODO: Uncomment the next line to return response 502 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(502);
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : 0,\n  \"data\" : [ {\n    \"ReportName\" : \"ReportName\",\n    \"Parameters\" : [ {\n      \"FieldVariable\" : \"FieldVariable\",\n      \"FieldId\" : \"FieldId\",\n      \"SubParentId\" : 9,\n      \"ControlId\" : 7,\n      \"FieldName\" : \"FieldName\",\n      \"IsDefualt\" : 3\n    }, {\n      \"FieldVariable\" : \"FieldVariable\",\n      \"FieldId\" : \"FieldId\",\n      \"SubParentId\" : 9,\n      \"ControlId\" : 7,\n      \"FieldName\" : \"FieldName\",\n      \"IsDefualt\" : 3\n    } ],\n    \"LayoutDtls\" : [ {\n      \"Id\" : 2,\n      \"Name\" : \"Name\"\n    }, {\n      \"Id\" : 2,\n      \"Name\" : \"Name\"\n    } ],\n    \"SourceType\" : 2,\n    \"ReportModule\" : 5,\n    \"ReportId\" : 6,\n    \"LinkId\" : 1,\n    \"ReportType\" : 5\n  }, {\n    \"ReportName\" : \"ReportName\",\n    \"Parameters\" : [ {\n      \"FieldVariable\" : \"FieldVariable\",\n      \"FieldId\" : \"FieldId\",\n      \"SubParentId\" : 9,\n      \"ControlId\" : 7,\n      \"FieldName\" : \"FieldName\",\n      \"IsDefualt\" : 3\n    }, {\n      \"FieldVariable\" : \"FieldVariable\",\n      \"FieldId\" : \"FieldId\",\n      \"SubParentId\" : 9,\n      \"ControlId\" : 7,\n      \"FieldName\" : \"FieldName\",\n      \"IsDefualt\" : 3\n    } ],\n    \"LayoutDtls\" : [ {\n      \"Id\" : 2,\n      \"Name\" : \"Name\"\n    }, {\n      \"Id\" : 2,\n      \"Name\" : \"Name\"\n    } ],\n    \"SourceType\" : 2,\n    \"ReportModule\" : 5,\n    \"ReportId\" : 6,\n    \"LinkId\" : 1,\n    \"ReportType\" : 5\n  } ],\n  \"message\" : \"message\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<InlineResponse20011>(exampleJson)
                        : default(InlineResponse20011);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>To get the Report data</remarks>
        /// <param name="body"></param>
        /// <param name="accessToken"></param>
        /// <response code="200">successful operation</response>
        [HttpPost]
        [Route("/8API/Reports/pagedata")]
        [ValidateModelState]
        [SwaggerOperation("8APIReportsPagedataPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(string), description: "successful operation")]
        public virtual IActionResult 8APIReportsPagedataPost([FromBody]Body3 body, [FromHeader]string accessToken)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(string));
            string exampleJson = null;
            exampleJson = "\"\"";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<string>(exampleJson)
                        : default(string);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Auto generated using Swagger Inspector</remarks>
        /// <param name="accessToken"></param>
        /// <response code="200">successful operation</response>
        /// <response code="403">Forbidden - Access to the resource by the provider is forbidden</response>
        /// <response code="404">Not found - The requested resource is not found</response>
        /// <response code="502">Provider server error - Something went wrong on the Provider or Endpoint’s server      </response>
        [HttpGet]
        [Route("/8API/Screen/Reports/ReportLayouts/Stock Ledger/0")]
        [ValidateModelState]
        [SwaggerOperation("8APIScreenReportsReportLayoutsStockLedger0Get")]
        [SwaggerResponse(statusCode: 200, type: typeof(InlineResponse20012), description: "successful operation")]
        public virtual IActionResult 8APIScreenReportsReportLayoutsStockLedger0Get([FromHeader]string accessToken)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(InlineResponse20012));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            //TODO: Uncomment the next line to return response 502 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(502);
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : 0,\n  \"data\" : [ {\n    \"Tag\" : 6,\n    \"ID\" : 1,\n    \"Name\" : \"Name\"\n  }, {\n    \"Tag\" : 6,\n    \"ID\" : 1,\n    \"Name\" : \"Name\"\n  } ],\n  \"message\" : \"message\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<InlineResponse20012>(exampleJson)
                        : default(InlineResponse20012);            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
