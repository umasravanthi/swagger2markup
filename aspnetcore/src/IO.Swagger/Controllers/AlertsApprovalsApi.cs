/*
 * API Documentation
 *
 * defaultDeription
 *
 * OpenAPI spec version: 1.0.0-oas3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;
using IO.Swagger.Security;
using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class AlertsApprovalsApiController : ControllerBase
    { 
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>AlertApprovalCount</remarks>
        /// <param name="accessToken"></param>
        /// <response code="200">successful operation</response>
        /// <response code="403">Forbidden - Access to the resource by the provider is forbidden</response>
        /// <response code="404">Not found - The requested resource is not found</response>
        /// <response code="502">Provider server error - Something went wrong on the Provider or Endpoint’s server      </response>
        [HttpGet]
        [Route("/8API/Screen/Transactions/AlertApprovalCount")]
        [ValidateModelState]
        [SwaggerOperation("8APIScreenTransactionsAlertApprovalCountGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(InlineResponse20019), description: "successful operation")]
        public virtual IActionResult 8APIScreenTransactionsAlertApprovalCountGet([FromHeader][Required()]string accessToken)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(InlineResponse20019));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            //TODO: Uncomment the next line to return response 502 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(502);
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : 0,\n  \"data\" : [ {\n    \"ApprovalsCount\" : 1,\n    \"AlertsCount\" : 6\n  }, {\n    \"ApprovalsCount\" : 1,\n    \"AlertsCount\" : 6\n  } ],\n  \"message\" : \"message\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<InlineResponse20019>(exampleJson)
                        : default(InlineResponse20019);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Approvals</remarks>
        /// <param name="accessToken"></param>
        /// <response code="200">successful operation</response>
        /// <response code="403">Forbidden - Access to the resource by the provider is forbidden</response>
        /// <response code="404">Not found - The requested resource is not found</response>
        /// <response code="502">Provider server error - Something went wrong on the Provider or Endpoint’s server      </response>
        [HttpGet]
        [Route("/8API/Screen/Transactions/Approvals")]
        [ValidateModelState]
        [SwaggerOperation("8APIScreenTransactionsApprovalsGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(InlineResponse20020), description: "successful operation")]
        public virtual IActionResult 8APIScreenTransactionsApprovalsGet([FromHeader][Required()]string accessToken)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(InlineResponse20020));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            //TODO: Uncomment the next line to return response 502 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(502);
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : 0,\n  \"data\" : [ {\n    \"ModuleId\" : 6,\n    \"AlertPurpose\" : \"AlertPurpose\",\n    \"ScreenId\" : 1,\n    \"ScreenName\" : \"ScreenName\",\n    \"Count\" : 5\n  }, {\n    \"ModuleId\" : 6,\n    \"AlertPurpose\" : \"AlertPurpose\",\n    \"ScreenId\" : 1,\n    \"ScreenName\" : \"ScreenName\",\n    \"Count\" : 5\n  } ],\n  \"message\" : \"message\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<InlineResponse20020>(exampleJson)
                        : default(InlineResponse20020);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Approvals</remarks>
        /// <param name="accessToken"></param>
        /// <param name="voucherType"></param>
        /// <response code="200">successful operation</response>
        /// <response code="403">Forbidden - Access to the resource by the provider is forbidden</response>
        /// <response code="404">Not found - The requested resource is not found</response>
        /// <response code="502">Provider server error - Something went wrong on the Provider or Endpoint’s server      </response>
        [HttpGet]
        [Route("/8API/Screen/Transactions/Approvals/{VoucherType}")]
        [ValidateModelState]
        [SwaggerOperation("8APIScreenTransactionsApprovalsVoucherTypeGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(InlineResponse20018), description: "successful operation")]
        public virtual IActionResult 8APIScreenTransactionsApprovalsVoucherTypeGet([FromHeader][Required()]string accessToken, [FromRoute][Required]string voucherType)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(InlineResponse20018));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            //TODO: Uncomment the next line to return response 502 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(502);
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : 0,\n  \"data\" : [ {\n    \"Status\" : 5,\n    \"Snooze\" : \"Snooze\",\n    \"Message\" : \"Message\",\n    \"Params\" : 3,\n    \"Index\" : 6,\n    \"Purpose\" : 1,\n    \"Code\" : \"Code\",\n    \"DateTime\" : \"DateTime\",\n    \"Name\" : \"Name\",\n    \"ModuleId\" : 7,\n    \"AlertId\" : 2,\n    \"ScreenId\" : 5,\n    \"RecordId\" : 9,\n    \"CreatedDateTime\" : \"CreatedDateTime\"\n  }, {\n    \"Status\" : 5,\n    \"Snooze\" : \"Snooze\",\n    \"Message\" : \"Message\",\n    \"Params\" : 3,\n    \"Index\" : 6,\n    \"Purpose\" : 1,\n    \"Code\" : \"Code\",\n    \"DateTime\" : \"DateTime\",\n    \"Name\" : \"Name\",\n    \"ModuleId\" : 7,\n    \"AlertId\" : 2,\n    \"ScreenId\" : 5,\n    \"RecordId\" : 9,\n    \"CreatedDateTime\" : \"CreatedDateTime\"\n  } ],\n  \"message\" : \"message\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<InlineResponse20018>(exampleJson)
                        : default(InlineResponse20018);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>AuthorizeVouchers</remarks>
        /// <param name="accessToken"></param>
        /// <param name="voucherNo"></param>
        /// <response code="200">successful operation</response>
        /// <response code="403">Forbidden - Access to the resource by the provider is forbidden</response>
        /// <response code="404">Not found - The requested resource is not found</response>
        /// <response code="502">Provider server error - Something went wrong on the Provider or Endpoint’s server</response>
        [HttpGet]
        [Route("/8API/Screen/Transactions/AuthorizeVouchers/Purchases Orders/PurOrd:5")]
        [ValidateModelState]
        [SwaggerOperation("8APIScreenTransactionsAuthorizeVouchersPurchasesOrdersPurOrd5Get")]
        [SwaggerResponse(statusCode: 200, type: typeof(InlineResponse2009), description: "successful operation")]
        public virtual IActionResult 8APIScreenTransactionsAuthorizeVouchersPurchasesOrdersPurOrd5Get([FromHeader][Required()]string accessToken, [FromRoute][Required]string voucherNo)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(InlineResponse2009));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            //TODO: Uncomment the next line to return response 502 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(502);
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : 0,\n  \"data\" : [ { }, { } ],\n  \"message\" : \"message\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<InlineResponse2009>(exampleJson)
                        : default(InlineResponse2009);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>RejectVouchers</remarks>
        /// <param name="accessToken"></param>
        /// <param name="voucherNo"></param>
        /// <response code="200">successful operation</response>
        /// <response code="403">Forbidden - Access to the resource by the provider is forbidden</response>
        /// <response code="404">Not found - The requested resource is not found</response>
        /// <response code="502">Provider server error - Something went wrong on the Provider or Endpoint’s server</response>
        [HttpGet]
        [Route("/8API/Screen/Transactions/RejectVouchers/Purchases Orders/{VoucherNo}")]
        [ValidateModelState]
        [SwaggerOperation("8APIScreenTransactionsRejectVouchersPurchasesOrdersVoucherNoGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(InlineResponse2009), description: "successful operation")]
        public virtual IActionResult 8APIScreenTransactionsRejectVouchersPurchasesOrdersVoucherNoGet([FromHeader][Required()]string accessToken, [FromRoute][Required]string voucherNo)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(InlineResponse2009));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            //TODO: Uncomment the next line to return response 502 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(502);
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : 0,\n  \"data\" : [ { }, { } ],\n  \"message\" : \"message\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<InlineResponse2009>(exampleJson)
                        : default(InlineResponse2009);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>StopVouchers</remarks>
        /// <param name="accessToken"></param>
        /// <param name="voucherNo"></param>
        /// <response code="200">successful operation</response>
        /// <response code="403">Forbidden - Access to the resource by the provider is forbidden</response>
        /// <response code="404">Not found - The requested resource is not found</response>
        /// <response code="502">Provider server error - Something went wrong on the Provider or Endpoint’s server      </response>
        [HttpGet]
        [Route("/8API/Screen/Transactions/StopVouchers/Purchases Orders/{VoucherNo}")]
        [ValidateModelState]
        [SwaggerOperation("8APIScreenTransactionsStopVouchersPurchasesOrdersVoucherNoGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(InlineResponse2009), description: "successful operation")]
        public virtual IActionResult 8APIScreenTransactionsStopVouchersPurchasesOrdersVoucherNoGet([FromHeader][Required()]string accessToken, [FromRoute][Required]string voucherNo)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(InlineResponse2009));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            //TODO: Uncomment the next line to return response 502 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(502);
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : 0,\n  \"data\" : [ { }, { } ],\n  \"message\" : \"message\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<InlineResponse2009>(exampleJson)
                        : default(InlineResponse2009);            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
